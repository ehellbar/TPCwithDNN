Bootstrap: docker
## https://hub.docker.com/r/tensorflow/tensorflow/tags
From: tensorflow/tensorflow:nightly-gpu-jupyter

%help
    This Singularity definition contains
        - tensorflow-datasets
        - tensorflow/models examples
        - RootInteractive package
        - MLHEP package
        - TPCwithDNN package
        - ROOT compiled from source (/alicesw/root)
    Build time on ALICE node: ~15 min
    singularity shell --nv /lustre/alice/users/hellbaer/NOTESData/JIRA/ATO-500/SCDcalibML_cuda.sif
    Run 'ipython' for an interactive python shell
    Run 'jupyter notebook' to startup a jupyter notebook server
    Run 'benchmark.sh' to start the TF benchmark

%environment
    export ENTERDIR=$(pwd)
    export ROOTDIR=/alicesw/root
    cd ${ROOTDIR}
    . ./bin/thisroot.sh
    cd ${ENTERDIR}
    export PYTHONPATH=${TPCwithDNN}:/usr/local/lib/python3.6/dist-packages:$PYTHONPATH
%files
%post
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y mlocate
    apt-get install -y less mc nano vim
    ## see https://alice-doc.github.io/alice-analysis-tutorial/building/prereq-ubuntu.html
    apt-get  install -y curl libcurl4-gnutls-dev build-essential gfortran cmake libmysqlclient-dev xorg-dev libglu1-mesa-dev libfftw3-dev libxml2-dev git unzip autoconf automake autopoint texinfo gettext libtool libtool-bin pkg-config bison flex libperl-dev libbz2-dev swig liblzma-dev libnanomsg-dev libyaml-cpp-dev rsync lsb-release unzip environment-modules libglfw3-dev
    apt-get install -y python3-tk graphviz
    ## requirements for ROOT (https://root.cern/install/dependencies/)
    apt-get install -y dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev libxft-dev libxext-dev
    apt-get install -y gfortran libssl-dev libpcre3-dev xlibmesa-glu-dev libglew1.5-dev libftgl-dev libmysqlclient-dev libfftw3-dev libcfitsio-dev graphviz-dev libavahi-compat-libdnssd-dev libldap2-dev libxml2-dev libkrb5-dev libgsl0-dev libqt4-dev
    apt-get install -y wget
    ## Python packages
    python3 -m pip install conda
    python3 -m pip install torch torchvision
    python3 -m pip install tensorflow_probability iminuit
    python3 -m pip install tensorflow-datasets pytest pandas bokeh==1.4.0 anytree ipywidgets tabulate
    python3 -m pip install jax scikit-garden
    python3 -m pip install git+https://github.com/ginnocen/MachineLearningHEP
    python3 -m pip install --upgrade git+https://github.com/miranov25/RootInteractive
    python3 -m pip install --upgrade git+https://github.com/AliceO2Group/TPCwithDNN
    ## ROOT
    mkdir /alicesw/
    cd /alicesw/
    # wget https://root.cern/download/root_v6.22.02.Linux-ubuntu20-x86_64-gcc9.3.tar.gz
    # tar -xzf root_v6.22.02.Linux-ubuntu20-x86_64-gcc9.3.tar.gz
    # rm root_v6.22.02.Linux-ubuntu20-x86_64-gcc9.3.tar.gz
    wget https://root.cern/download/root_v6.20.04.source.tar.gz
    tar -xzvf root_v6.20.04.source.tar.gz
    rm root_v6.20.04.source.tar.gz
    mkdir -p /alicesw/root /alicesw/rootbuild
    cd /alicesw/rootbuild
    cmake -DPYTHON_EXECUTABLE=/usr/bin/python3 -DCMAKE_INSTALL_PREFIX=/alicesw/root /alicesw/root-6.20.04
    cmake --build . -- install -j128
    rm -r /alicesw/root-6.20.04 /alicesw/rootbuild
    for file in $(ls /alicesw/root/lib/lib*.so); do ln -sf ${file} ${file}.6.18; done
    cd /alicesw/root/bin
    sed -i '267,270d' ./thisroot.sh
    . ./thisroot.sh
    python3 -m pip install root_pandas
    ##
    cd /opt
    git clone https://github.com/tensorflow/models
    ## install benchmarks
    mkdir -p /benchmarks/
    cd /benchmarks/
    git clone  https://github.com/tensorflow/benchmarks tensorflow_benchmarks
    git clone  https://github.com/elombardi2/pytorch-gpu-benchmark pytorch-gpu-benchmark
    echo '# default' >/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=16   | tee  tf_cnn_benchmarks16.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=32   | tee  tf_cnn_benchmarks32.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=64   | tee  tf_cnn_benchmarks64.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=128   | tee  tf_cnn_benchmarks128.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=256   | tee  tf_cnn_benchmarks256.log' >>/usr/local/bin/benchmark.sh
    echo '--use_fp16' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=16 --use_fp16   | tee  tf_cnn_benchmarks16_fp16.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=32 --use_fp16   | tee  tf_cnn_benchmarks32_fp16.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=64 --use_fp16   | tee  tf_cnn_benchmarks64_fp16.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=128 --use_fp16   | tee  tf_cnn_benchmarks128_fp16.log' >>/usr/local/bin/benchmark.sh
    echo 'python3 /benchmarks/tensorflow_benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py  --batch_size=256 --use_fp16   | tee  tf_cnn_benchmarks256_fp16.log' >>/usr/local/bin/benchmark.sh
    updatedb
    rm -f /var/cache/apt/archives/lock
    rm -rf /root/.cache
%runscript

    echo "Clone of tensorflow cuda example container to run software for TPC SC distortion calibration development"
    echo "https://hub.docker.com/r/tensorflow/tensorflow/tags"
    echo
    echo "Run 'ipython' for an interactive python shell"
    echo "Run 'jupyter notebook' to startup a jupyter notebook server"
    echo "Run 'benchmark.sh' to start the TF benchmark"
    echo
    bash

%labels
    Maintainer "ernst.hellbar@cern.ch"
